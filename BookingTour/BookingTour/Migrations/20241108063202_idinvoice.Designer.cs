// <auto-generated />
using System;
using BookingTour.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookingTour.Migrations
{
    [DbContext(typeof(YourExistingDbContextName))]
    [Migration("20241108063202_idinvoice")]
    partial class idinvoice
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("BookingTour", b =>
                {
                    b.Property<long>("BookingIdBooking")
                        .HasColumnType("bigint");

                    b.Property<long>("ToursIdTour")
                        .HasColumnType("bigint");

                    b.HasKey("BookingIdBooking", "ToursIdTour");

                    b.HasIndex("ToursIdTour");

                    b.ToTable("BookingTour");
                });

            modelBuilder.Entity("BookingTour.Models.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("BookingTour.Models.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("BookingTour.Models.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Age")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Fullname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("fullname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("BookingTour.Models.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("BookingTour.Models.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("BookingTour.Models.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BookingTour.Models.Blog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("IdBlog")
                        .HasColumnType("bigint");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Blog");
                });

            modelBuilder.Entity("BookingTour.Models.Booking", b =>
                {
                    b.Property<long>("IdBooking")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_BOOKING");

                    b.Property<DateTime?>("BookingTime")
                        .HasColumnType("datetime")
                        .HasColumnName("BOOKING_TIME");

                    b.Property<DateTime?>("CheckInDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CHECK_IN_DATE");

                    b.Property<DateTime?>("CheckOutDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CHECK_OUT_DATE");

                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("IdHotel")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_HOTEL");

                    b.Property<long?>("IdInvoice")
                        .HasColumnType("bigint");

                    b.Property<long>("IdStatus")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_STATUS");

                    b.Property<long>("IdTour")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_TOUR");

                    b.Property<long?>("InvoiceNavigationIdInvoice")
                        .HasColumnType("bigint");

                    b.HasKey("IdBooking")
                        .HasName("pk_BOOKING");

                    b.HasIndex("Id");

                    b.HasIndex("IdHotel");

                    b.HasIndex("IdStatus");

                    b.HasIndex("IdTour");

                    b.HasIndex("InvoiceNavigationIdInvoice");

                    b.ToTable("BOOKING", (string)null);
                });

            modelBuilder.Entity("BookingTour.Models.BookingStatus", b =>
                {
                    b.Property<long>("IdStatus")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_STATUS");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("StatusName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("STATUS_NAME");

                    b.HasKey("IdStatus")
                        .HasName("pk_BOOKING_STATUS");

                    b.ToTable("BOOKING_STATUS", (string)null);
                });

            modelBuilder.Entity("BookingTour.Models.Chat", b =>
                {
                    b.Property<long>("IdChat")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_CHAT");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Message")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("MESSAGE");

                    b.HasKey("IdChat")
                        .HasName("pk_CHAT");

                    b.HasIndex("Id");

                    b.ToTable("CHAT", (string)null);
                });

            modelBuilder.Entity("BookingTour.Models.Comment", b =>
                {
                    b.Property<long>("IdTour")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_TOUR");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CommentDate")
                        .HasColumnType("datetime")
                        .HasColumnName("COMMENT_DATE");

                    b.Property<string>("Content")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CONTENT");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Reply")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("REPLY");

                    b.HasKey("IdTour", "Id")
                        .HasName("pk_COMMENT");

                    b.HasIndex("Id");

                    b.ToTable("COMMENT", (string)null);
                });

            modelBuilder.Entity("BookingTour.Models.Destination", b =>
                {
                    b.Property<long>("IdDes")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_DES");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ADDRESS");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NAME");

                    b.HasKey("IdDes")
                        .HasName("pk_DESTINATION");

                    b.ToTable("DESTINATION", (string)null);
                });

            modelBuilder.Entity("BookingTour.Models.Facility", b =>
                {
                    b.Property<long>("IdFacility")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_FACILITY");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<long>("IdType")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_TYPE");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NAME");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("STATUS");

                    b.HasKey("IdFacility")
                        .HasName("pk_FACILITY");

                    b.HasIndex("IdType");

                    b.ToTable("FACILITY", (string)null);
                });

            modelBuilder.Entity("BookingTour.Models.HostRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("HostRegistrations");
                });

            modelBuilder.Entity("BookingTour.Models.Hotel", b =>
                {
                    b.Property<long>("IdHotel")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_HOTEL");

                    b.Property<string>("Available")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("AVAILABLE");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<byte[]>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varbinary(100)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("IMAGE");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("LOCATION");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NAME");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("PHONE_NUMBER");

                    b.Property<long?>("StarRating")
                        .HasColumnType("bigint")
                        .HasColumnName("STAR_RATING");

                    b.HasKey("IdHotel")
                        .HasName("pk_HOTEL");

                    b.ToTable("HOTEL", (string)null);
                });

            modelBuilder.Entity("BookingTour.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("IdTour")
                        .HasColumnType("bigint");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TourIdTour")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TourIdTour");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("BookingTour.Models.Invoice", b =>
                {
                    b.Property<long>("IdInvoice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID_INVOICE");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdInvoice"));

                    b.Property<DateTime?>("BillingDate")
                        .HasColumnType("datetime")
                        .HasColumnName("BILLING_DATE");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("TOTAL_AMOUNT");

                    b.HasKey("IdInvoice")
                        .HasName("pk_INVOICE");

                    b.ToTable("INVOICE", (string)null);
                });

            modelBuilder.Entity("BookingTour.Models.Payment", b =>
                {
                    b.Property<long>("IdPayment")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_PAYMENT");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("AMOUNT");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("DATE");

                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IsRefunded")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("IS_REFUNDED");

                    b.Property<string>("Method")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("METHOD");

                    b.Property<decimal?>("RefundAmount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("REFUND_AMOUNT");

                    b.Property<DateTime?>("RefundDate")
                        .HasColumnType("datetime")
                        .HasColumnName("REFUND_DATE");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("STATUS");

                    b.HasKey("IdPayment")
                        .HasName("pk_PAYMENT");

                    b.HasIndex("Id");

                    b.ToTable("PAYMENT", (string)null);
                });

            modelBuilder.Entity("BookingTour.Models.PaymentInvoice", b =>
                {
                    b.Property<long>("IdPayment")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_PAYMENT");

                    b.Property<long>("IdInvoice")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_INVOICE");

                    b.Property<decimal?>("PaidAmount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("PAID_AMOUNT");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime")
                        .HasColumnName("PAYMENT_DATE");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("STATUS");

                    b.HasKey("IdPayment", "IdInvoice")
                        .HasName("pk_PAYMENT_INVOICE");

                    b.HasIndex("IdInvoice");

                    b.ToTable("PAYMENT_INVOICE", (string)null);
                });

            modelBuilder.Entity("BookingTour.Models.Promotion", b =>
                {
                    b.Property<long>("IdPmt")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_PMT");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("DISCOUNT_AMOUNT");

                    b.Property<string>("EligibilityCriteria")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ELIGIBILITY_CRITERIA");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("END_DATE");

                    b.Property<long>("IdHotel")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_HOTEL");

                    b.Property<long>("IdTour")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_TOUR");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("NAME");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("START_DATE");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("STATUS");

                    b.HasKey("IdPmt")
                        .HasName("pk_PROMOTION");

                    b.HasIndex("IdHotel");

                    b.HasIndex("IdTour");

                    b.ToTable("PROMOTION", (string)null);
                });

            modelBuilder.Entity("BookingTour.Models.Report", b =>
                {
                    b.Property<long>("IdReport")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_REPORT");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("IdTour")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_TOUR");

                    b.Property<string>("Rating")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("RATING");

                    b.HasKey("IdReport")
                        .HasName("pk_REPORT");

                    b.HasIndex("Id");

                    b.HasIndex("IdTour");

                    b.ToTable("REPORT", (string)null);
                });

            modelBuilder.Entity("BookingTour.Models.Room", b =>
                {
                    b.Property<long>("IdRoom")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_ROOM");

                    b.Property<long>("IdHotel")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_HOTEL");

                    b.Property<long>("IdType")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_TYPE");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("PRICE");

                    b.Property<string>("RoomNumber")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ROOM_NUMBER");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("STATUS");

                    b.HasKey("IdRoom")
                        .HasName("pk_ROOM");

                    b.HasIndex("IdHotel");

                    b.HasIndex("IdType");

                    b.ToTable("ROOM", (string)null);
                });

            modelBuilder.Entity("BookingTour.Models.RoomDetail", b =>
                {
                    b.Property<long>("IdRoom")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_ROOM");

                    b.Property<long>("IdFacility")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_FACILITY");

                    b.Property<string>("Available")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("AVAILABLE");

                    b.Property<string>("Condition")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CONDITION");

                    b.Property<long?>("Quanlity")
                        .HasColumnType("bigint")
                        .HasColumnName("QUANLITY");

                    b.HasKey("IdRoom", "IdFacility")
                        .HasName("pk_ROOM_DETAIL");

                    b.HasIndex("IdFacility");

                    b.ToTable("ROOM_DETAIL", (string)null);
                });

            modelBuilder.Entity("BookingTour.Models.Service", b =>
                {
                    b.Property<long>("IdService")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_SERVICE");

                    b.Property<string>("Available")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("AVAILABLE");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<long>("IdHotel")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_HOTEL");

                    b.Property<long>("IdTour")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_TOUR");

                    b.Property<long>("IdType")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_TYPE");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("NAME");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("PRICE");

                    b.HasKey("IdService")
                        .HasName("pk_SERVICE");

                    b.HasIndex("IdHotel");

                    b.HasIndex("IdTour");

                    b.HasIndex("IdType");

                    b.ToTable("SERVICE", (string)null);
                });

            modelBuilder.Entity("BookingTour.Models.Tour", b =>
                {
                    b.Property<long>("IdTour")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_TOUR");

                    b.Property<string>("ApprovalStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("END_DATE");

                    b.Property<long>("IdHotel")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_HOTEL");

                    b.Property<long>("IdTrans")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_TRANS");

                    b.Property<long>("IdType")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_TYPE");

                    b.Property<string>("IdUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUserNavigationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("IMAGE");

                    b.Property<string>("IsDelete")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("IS_DELETE");

                    b.Property<long?>("MaxQuantity")
                        .HasColumnType("bigint")
                        .HasColumnName("MAX_QUANTITY");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("NAME");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("PRICE");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("START_DATE");

                    b.HasKey("IdTour")
                        .HasName("pk_TOUR");

                    b.HasIndex("IdHotel");

                    b.HasIndex("IdTrans");

                    b.HasIndex("IdType");

                    b.HasIndex("IdUserNavigationId");

                    b.ToTable("TOUR", (string)null);
                });

            modelBuilder.Entity("BookingTour.Models.TourDetail", b =>
                {
                    b.Property<long>("IdTour")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_TOUR");

                    b.Property<long>("IdDes")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_DES");

                    b.Property<string>("Itinerary")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("ITINERARY");

                    b.HasKey("IdTour", "IdDes")
                        .HasName("pk_TOUR_DETAILS");

                    b.HasIndex("IdDes");

                    b.ToTable("TOUR_DETAILS", (string)null);
                });

            modelBuilder.Entity("BookingTour.Models.Transportation", b =>
                {
                    b.Property<long>("IdTrans")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_TRANS");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NAME");

                    b.Property<long?>("SeatAvailability")
                        .HasColumnType("bigint")
                        .HasColumnName("SEAT_AVAILABILITY");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TYPE");

                    b.HasKey("IdTrans")
                        .HasName("pk_TRANSPORTATION");

                    b.ToTable("TRANSPORTATION", (string)null);
                });

            modelBuilder.Entity("BookingTour.Models.TypeOfFacility", b =>
                {
                    b.Property<long>("IdType")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_TYPE");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NAME");

                    b.HasKey("IdType")
                        .HasName("pk_TYPE_OF_FACILITY");

                    b.ToTable("TYPE_OF_FACILITY", (string)null);
                });

            modelBuilder.Entity("BookingTour.Models.TypeOfRoom", b =>
                {
                    b.Property<long>("IdType")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_TYPE");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NAME");

                    b.HasKey("IdType")
                        .HasName("pk_TYPE_OF_ROOM");

                    b.ToTable("TYPE_OF_ROOM", (string)null);
                });

            modelBuilder.Entity("BookingTour.Models.TypeOfService", b =>
                {
                    b.Property<long>("IdType")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_TYPE");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NAME");

                    b.HasKey("IdType")
                        .HasName("pk_TYPE_OF_SERVICE");

                    b.ToTable("TYPE_OF_SERVICE", (string)null);
                });

            modelBuilder.Entity("BookingTour.Models.TypeOfTour", b =>
                {
                    b.Property<long>("IdType")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_TYPE");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NAME");

                    b.HasKey("IdType")
                        .HasName("pk_TYPE_OF_TOUR");

                    b.ToTable("TYPE_OF_TOUR", (string)null);
                });

            modelBuilder.Entity("BookingTour.Models.UsersFavoriteTour", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("IdTour")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_TOUR");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_AT");

                    b.HasKey("Id", "IdTour")
                        .HasName("pk_USERS_FAVORITE_TOUR");

                    b.HasIndex("IdTour");

                    b.ToTable("USERS_FAVORITE_TOUR", (string)null);
                });

            modelBuilder.Entity("PromotionUser", b =>
                {
                    b.Property<long>("IdPmt")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_PMT");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdPmt", "Id")
                        .HasName("pk_PROMOTION_USER");

                    b.HasIndex("Id");

                    b.ToTable("PROMOTION_USER", (string)null);
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("BookingTour.Models.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingTour.Models.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookingTour", b =>
                {
                    b.HasOne("BookingTour.Models.Booking", null)
                        .WithMany()
                        .HasForeignKey("BookingIdBooking")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingTour.Models.Tour", null)
                        .WithMany()
                        .HasForeignKey("ToursIdTour")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookingTour.Models.AspNetRoleClaim", b =>
                {
                    b.HasOne("BookingTour.Models.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BookingTour.Models.AspNetUserClaim", b =>
                {
                    b.HasOne("BookingTour.Models.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookingTour.Models.AspNetUserLogin", b =>
                {
                    b.HasOne("BookingTour.Models.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookingTour.Models.AspNetUserToken", b =>
                {
                    b.HasOne("BookingTour.Models.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookingTour.Models.Booking", b =>
                {
                    b.HasOne("BookingTour.Models.AspNetUser", "IdNavigation")
                        .WithMany("Bookings")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK__BOOKING__Id__1C3D2329");

                    b.HasOne("BookingTour.Models.Hotel", "IdHotelNavigation")
                        .WithMany("Bookings")
                        .HasForeignKey("IdHotel")
                        .IsRequired()
                        .HasConstraintName("FK__BOOKING__ID_HOTE__22EA20B8");

                    b.HasOne("BookingTour.Models.BookingStatus", "IdStatusNavigation")
                        .WithMany("Bookings")
                        .HasForeignKey("IdStatus")
                        .IsRequired()
                        .HasConstraintName("FK__BOOKING__ID_STAT__28A2FA0E");

                    b.HasOne("BookingTour.Models.Tour", "IdTourNavigation")
                        .WithMany("Bookings")
                        .HasForeignKey("IdTour")
                        .IsRequired()
                        .HasConstraintName("FK__BOOKING__ID_TOUR__1590259A");

                    b.HasOne("BookingTour.Models.Invoice", "InvoiceNavigation")
                        .WithMany()
                        .HasForeignKey("InvoiceNavigationIdInvoice");

                    b.Navigation("IdHotelNavigation");

                    b.Navigation("IdNavigation");

                    b.Navigation("IdStatusNavigation");

                    b.Navigation("IdTourNavigation");

                    b.Navigation("InvoiceNavigation");
                });

            modelBuilder.Entity("BookingTour.Models.Chat", b =>
                {
                    b.HasOne("BookingTour.Models.AspNetUser", "IdNavigation")
                        .WithMany("Chats")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK__CHAT__Id__1A54DAB7");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("BookingTour.Models.Comment", b =>
                {
                    b.HasOne("BookingTour.Models.AspNetUser", "IdNavigation")
                        .WithMany("Comments")
                        .HasForeignKey("Id")
                        .IsRequired()
                        .HasConstraintName("FK__COMMENT__Id__17786E0C");

                    b.HasOne("BookingTour.Models.Tour", "IdTourNavigation")
                        .WithMany("Comments")
                        .HasForeignKey("IdTour")
                        .IsRequired()
                        .HasConstraintName("FK__COMMENT__ID_TOUR__10CB707D");

                    b.Navigation("IdNavigation");

                    b.Navigation("IdTourNavigation");
                });

            modelBuilder.Entity("BookingTour.Models.Facility", b =>
                {
                    b.HasOne("BookingTour.Models.TypeOfFacility", "IdTypeNavigation")
                        .WithMany("Facilities")
                        .HasForeignKey("IdType")
                        .IsRequired()
                        .HasConstraintName("FK__FACILITY__ID_TYP__2D67AF2B");

                    b.Navigation("IdTypeNavigation");
                });

            modelBuilder.Entity("BookingTour.Models.HostRegistration", b =>
                {
                    b.HasOne("BookingTour.Models.AspNetUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookingTour.Models.Image", b =>
                {
                    b.HasOne("BookingTour.Models.Tour", null)
                        .WithMany("images")
                        .HasForeignKey("TourIdTour");
                });

            modelBuilder.Entity("BookingTour.Models.Payment", b =>
                {
                    b.HasOne("BookingTour.Models.AspNetUser", "IdNavigation")
                        .WithMany("Payments")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK__PAYMENT__Id__186C9245");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("BookingTour.Models.PaymentInvoice", b =>
                {
                    b.HasOne("BookingTour.Models.Invoice", "IdInvoiceNavigation")
                        .WithMany("PaymentInvoices")
                        .HasForeignKey("IdInvoice")
                        .IsRequired()
                        .HasConstraintName("FK__PAYMENT_I__ID_IN__27AED5D5");

                    b.HasOne("BookingTour.Models.Payment", "IdPaymentNavigation")
                        .WithMany("PaymentInvoices")
                        .HasForeignKey("IdPayment")
                        .IsRequired()
                        .HasConstraintName("FK__PAYMENT_I__ID_PA__24D2692A");

                    b.Navigation("IdInvoiceNavigation");

                    b.Navigation("IdPaymentNavigation");
                });

            modelBuilder.Entity("BookingTour.Models.Promotion", b =>
                {
                    b.HasOne("BookingTour.Models.Hotel", "IdHotelNavigation")
                        .WithMany("Promotions")
                        .HasForeignKey("IdHotel")
                        .IsRequired()
                        .HasConstraintName("FK__PROMOTION__ID_HO__2101D846");

                    b.HasOne("BookingTour.Models.Tour", "IdTourNavigation")
                        .WithMany("Promotions")
                        .HasForeignKey("IdTour")
                        .IsRequired()
                        .HasConstraintName("FK__PROMOTION__ID_TO__13A7DD28");

                    b.Navigation("IdHotelNavigation");

                    b.Navigation("IdTourNavigation");
                });

            modelBuilder.Entity("BookingTour.Models.Report", b =>
                {
                    b.HasOne("BookingTour.Models.AspNetUser", "IdNavigation")
                        .WithMany("Reports")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK__REPORT__Id__1B48FEF0");

                    b.HasOne("BookingTour.Models.Tour", "IdTourNavigation")
                        .WithMany("Reports")
                        .HasForeignKey("IdTour")
                        .IsRequired()
                        .HasConstraintName("FK__REPORT__ID_TOUR__149C0161");

                    b.Navigation("IdNavigation");

                    b.Navigation("IdTourNavigation");
                });

            modelBuilder.Entity("BookingTour.Models.Room", b =>
                {
                    b.HasOne("BookingTour.Models.Hotel", "IdHotelNavigation")
                        .WithMany("Rooms")
                        .HasForeignKey("IdHotel")
                        .IsRequired()
                        .HasConstraintName("FK__ROOM__ID_HOTEL__23DE44F1");

                    b.HasOne("BookingTour.Models.TypeOfRoom", "IdTypeNavigation")
                        .WithMany("Rooms")
                        .HasForeignKey("IdType")
                        .IsRequired()
                        .HasConstraintName("FK__ROOM__ID_TYPE__2A8B4280");

                    b.Navigation("IdHotelNavigation");

                    b.Navigation("IdTypeNavigation");
                });

            modelBuilder.Entity("BookingTour.Models.RoomDetail", b =>
                {
                    b.HasOne("BookingTour.Models.Facility", "IdFacilityNavigation")
                        .WithMany("RoomDetails")
                        .HasForeignKey("IdFacility")
                        .IsRequired()
                        .HasConstraintName("FK__ROOM_DETA__ID_FA__2C738AF2");

                    b.HasOne("BookingTour.Models.Room", "IdRoomNavigation")
                        .WithMany("RoomDetails")
                        .HasForeignKey("IdRoom")
                        .IsRequired()
                        .HasConstraintName("FK__ROOM_DETA__ID_RO__29971E47");

                    b.Navigation("IdFacilityNavigation");

                    b.Navigation("IdRoomNavigation");
                });

            modelBuilder.Entity("BookingTour.Models.Service", b =>
                {
                    b.HasOne("BookingTour.Models.Hotel", "IdHotelNavigation")
                        .WithMany("Services")
                        .HasForeignKey("IdHotel")
                        .IsRequired()
                        .HasConstraintName("FK__SERVICE__ID_HOTE__21F5FC7F");

                    b.HasOne("BookingTour.Models.Tour", "IdTourNavigation")
                        .WithMany("Services")
                        .HasForeignKey("IdTour")
                        .IsRequired()
                        .HasConstraintName("");

                    b.HasOne("BookingTour.Models.TypeOfService", "IdTypeNavigation")
                        .WithMany("Services")
                        .HasForeignKey("IdType")
                        .IsRequired()
                        .HasConstraintName("FK__SERVICE__ID_TYPE__2B7F66B9");

                    b.Navigation("IdHotelNavigation");

                    b.Navigation("IdTourNavigation");

                    b.Navigation("IdTypeNavigation");
                });

            modelBuilder.Entity("BookingTour.Models.Tour", b =>
                {
                    b.HasOne("BookingTour.Models.Hotel", "IdHotelNavigation")
                        .WithMany("Tours")
                        .HasForeignKey("IdHotel")
                        .IsRequired()
                        .HasConstraintName("FK__TOUR__ID_HOTEL__200DB40D");

                    b.HasOne("BookingTour.Models.Transportation", "IdTransNavigation")
                        .WithMany("Tours")
                        .HasForeignKey("IdTrans")
                        .IsRequired()
                        .HasConstraintName("FK__TOUR__ID_TRANS__26BAB19C");

                    b.HasOne("BookingTour.Models.TypeOfTour", "IdTypeNavigation")
                        .WithMany("Tours")
                        .HasForeignKey("IdType")
                        .IsRequired()
                        .HasConstraintName("FK__TOUR__ID_TYPE__1F198FD4");

                    b.HasOne("BookingTour.Models.AspNetUser", "IdUserNavigation")
                        .WithMany("Tours")
                        .HasForeignKey("IdUserNavigationId");

                    b.Navigation("IdHotelNavigation");

                    b.Navigation("IdTransNavigation");

                    b.Navigation("IdTypeNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("BookingTour.Models.TourDetail", b =>
                {
                    b.HasOne("BookingTour.Models.Destination", "IdDesNavigation")
                        .WithMany("TourDetails")
                        .HasForeignKey("IdDes")
                        .IsRequired()
                        .HasConstraintName("FK__TOUR_DETA__ID_DE__25C68D63");

                    b.HasOne("BookingTour.Models.Tour", "IdTourNavigation")
                        .WithMany("TourDetails")
                        .HasForeignKey("IdTour")
                        .IsRequired()
                        .HasConstraintName("FK__TOUR_DETA__ID_TO__11BF94B6");

                    b.Navigation("IdDesNavigation");

                    b.Navigation("IdTourNavigation");
                });

            modelBuilder.Entity("BookingTour.Models.UsersFavoriteTour", b =>
                {
                    b.HasOne("BookingTour.Models.AspNetUser", "IdNavigation")
                        .WithMany("UsersFavoriteTours")
                        .HasForeignKey("Id")
                        .IsRequired()
                        .HasConstraintName("FK__USERS_FAVORI__Id__1960B67E");

                    b.HasOne("BookingTour.Models.Tour", "IdTourNavigation")
                        .WithMany("UsersFavoriteTours")
                        .HasForeignKey("IdTour")
                        .IsRequired()
                        .HasConstraintName("FK__USERS_FAV__ID_TO__12B3B8EF");

                    b.Navigation("IdNavigation");

                    b.Navigation("IdTourNavigation");
                });

            modelBuilder.Entity("PromotionUser", b =>
                {
                    b.HasOne("BookingTour.Models.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .IsRequired()
                        .HasConstraintName("FK__PROMOTION_US__Id__1D314762");

                    b.HasOne("BookingTour.Models.Promotion", null)
                        .WithMany()
                        .HasForeignKey("IdPmt")
                        .IsRequired()
                        .HasConstraintName("FK__PROMOTION__ID_PM__1E256B9B");
                });

            modelBuilder.Entity("BookingTour.Models.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("BookingTour.Models.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");

                    b.Navigation("Bookings");

                    b.Navigation("Chats");

                    b.Navigation("Comments");

                    b.Navigation("Payments");

                    b.Navigation("Reports");

                    b.Navigation("Tours");

                    b.Navigation("UsersFavoriteTours");
                });

            modelBuilder.Entity("BookingTour.Models.BookingStatus", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("BookingTour.Models.Destination", b =>
                {
                    b.Navigation("TourDetails");
                });

            modelBuilder.Entity("BookingTour.Models.Facility", b =>
                {
                    b.Navigation("RoomDetails");
                });

            modelBuilder.Entity("BookingTour.Models.Hotel", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Promotions");

                    b.Navigation("Rooms");

                    b.Navigation("Services");

                    b.Navigation("Tours");
                });

            modelBuilder.Entity("BookingTour.Models.Invoice", b =>
                {
                    b.Navigation("PaymentInvoices");
                });

            modelBuilder.Entity("BookingTour.Models.Payment", b =>
                {
                    b.Navigation("PaymentInvoices");
                });

            modelBuilder.Entity("BookingTour.Models.Room", b =>
                {
                    b.Navigation("RoomDetails");
                });

            modelBuilder.Entity("BookingTour.Models.Tour", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Comments");

                    b.Navigation("Promotions");

                    b.Navigation("Reports");

                    b.Navigation("Services");

                    b.Navigation("TourDetails");

                    b.Navigation("UsersFavoriteTours");

                    b.Navigation("images");
                });

            modelBuilder.Entity("BookingTour.Models.Transportation", b =>
                {
                    b.Navigation("Tours");
                });

            modelBuilder.Entity("BookingTour.Models.TypeOfFacility", b =>
                {
                    b.Navigation("Facilities");
                });

            modelBuilder.Entity("BookingTour.Models.TypeOfRoom", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("BookingTour.Models.TypeOfService", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("BookingTour.Models.TypeOfTour", b =>
                {
                    b.Navigation("Tours");
                });
#pragma warning restore 612, 618
        }
    }
}
